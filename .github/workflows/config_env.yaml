name: CD - Ansible Deploy (Linux Host Runner)

on:
  pull_request:
    types: [closed]      # Âè™Âú® PR Ë¢´ÈóúÈñâÊôÇËß∏Áôº
    branches:
      - main
    paths:
      - 'ansible/local/**'    # Âè™Êúâ Ansible ËÆäÊõ¥ÊôÇÊâçËß∏Áôº

jobs:
  ansible-deploy:
    runs-on: Linux    

    env:
      INVENTORY_FILE: "inventory.yml"
      PLAYBOOK_FILE: "playbooks/site.yml"
      VAULT_PASS_FILE: "/tmp/vault_pass.txt"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: ansible/local
          fetch-depth: 1

      # ============================
      # Stage 1Ô∏è‚É£ Verify Environment
      # ============================
      - name: üìò Verify Ansible installation
        working-directory: ansible/local
        run: |
          echo "üìò Verifying Ansible installation..."
          ansible --version || (echo "‚ùå Ansible not installed" && exit 1)
          ansible-config dump --only-changed || true
          ansible-galaxy collection install -r requirements.yml

      # ==============================
      # Stage 2Ô∏è‚É£ Syntax Check (Optional)
      # ==============================
      - name: üß© Check Playbook Syntax
        working-directory: ansible/local
        run: |
          echo "üß© Checking playbook syntax..."
          ansible-playbook -i "${INVENTORY_FILE}" "${PLAYBOOK_FILE}" --syntax-check

      # ============================
      # Stage 3Ô∏è‚É£ Run Playbook (Vault)
      # ============================
      - name: üöÄ Run Ansible Playbook (Vault Enabled)
        working-directory: ansible/local
        env:
          VAULT_PASS: ${{ secrets.ANSIBLE_VAULT_PASS }}   # Â∞çÊáâ Jenkins credentialsId
        run: |
          echo "üöÄ Running Ansible playbook with Vault decryption..."
          echo "$VAULT_PASS" > "${VAULT_PASS_FILE}"
          chmod 600 "${VAULT_PASS_FILE}"

          ansible-playbook -i "${INVENTORY_FILE}" "${PLAYBOOK_FILE}" \
            --vault-password-file "${VAULT_PASS_FILE}"

          rm -f "${VAULT_PASS_FILE}"

      # ============================
      # Stage 4Ô∏è‚É£ Fetch Kubeconfig
      # ============================
      - name: üß≠ Fetch Kubeconfig
        run: |
          echo "üìÇ Determining runner's home directory..."
          AGENT_HOME="$HOME"
          KUBECONFIG_PATH="${AGENT_HOME}/.kubeconfig"

          export KUBECONFIG="${KUBECONFIG_PATH}"
          echo "‚úÖ KUBECONFIG variable set to: ${KUBECONFIG}"

          if [ -f "${KUBECONFIG_PATH}" ]; then
            echo "üåê Kubeconfig found:"
            head -n 10 "${KUBECONFIG_PATH}"
          else
            echo "‚ö†Ô∏è  No kubeconfig found at ${KUBECONFIG_PATH}"
          fi
